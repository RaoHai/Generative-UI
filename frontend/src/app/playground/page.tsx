'use client';

import React, { useState, useEffect } from 'react';
import { useCompletion } from '@ai-sdk/react';


// Level data with descriptions and code examples
const levelData = [
  {
    id: 0,
    title: "Level 0: Markdown Expression",
    emoji: "📝",
    description: "Basic content generation with Markdown formatting. AI generates responses in Markdown format to present structured content, lists, tables, and basic formatting.",
    features: ["Text formatting", "Lists and tables", "Basic document structure", "Static content"],
    codeExample: `// Basic Markdown output
const response = await ai.generate({
  prompt: "Create a product overview",
  format: "markdown"
});

// Output:
// # Product Overview
// ## Features
// - User management
// - Data analytics
// - **Real-time** reporting`,
    color: "from-slate-100 to-slate-200"
  },
  {
    id: 1,
    title: "Level 1: AI-Assisted Code Generation",
    emoji: "⚡",
    description: "LLMs serve as development assistants, generating static code snippets like HTML, CSS, or React components through natural language prompts.",
    features: ["Static code generation", "Development assistance", "Template creation", "Manual integration"],
    codeExample: `// AI-generated React component
const UserCard = ({ user }) => (
  <div className="card">
    <h3>{user.name}</h3>
    <p>{user.role}</p>
    <button>Contact</button>
  </div>
);

// Generated by prompt: "Create a user card component"`,
    color: "from-blue-100 to-blue-200"
  },
  {
    id: 2,
    title: "Level 2: Conditional and Dynamic UI",
    emoji: "🔄",
    description: "Servers or AI agents select and combine components from a predefined UI library based on context such as user roles and behavioral data.",
    features: ["Context-aware selection", "Predefined components", "Rule-based rendering", "Dynamic combinations"],
    codeExample: `// Dynamic component selection
const renderComponent = (context) => {
  if (context.userRole === 'admin') {
    return <AdminDashboard />;
  } else if (context.dataType === 'chart') {
    return <ChartComponent data={context.data} />;
  }
  return <DefaultView />;
};

// Context-driven UI assembly`,
    color: "from-green-100 to-green-200"
  },
  {
    id: 3,
    title: "Level 3: Abstract Assembly (SDUI)",
    emoji: "🏗️",
    description: "AI generates declarative, abstract UI representations (JSON metadata). The client has a universal rendering engine that parses and maps to native UI controls.",
    features: ["JSON-driven UI", "Universal rendering", "Cross-platform", "Declarative structure"],
    codeExample: `// SDUI JSON Schema
const uiSchema = {
  type: "container",
  layout: "vertical",
  children: [
    {
      type: "header",
      content: "Dynamic Interface",
      style: { fontSize: "lg" }
    },
    {
      type: "metric",
      label: "Users",
      value: 1234,
      trend: "up"
    }
  ]
};

// Universal renderer processes JSON → UI`,
    color: "from-purple-100 to-purple-200"
  },
  {
    id: 4,
    title: "Level 4: Interactive and Agent-Driven UI",
    emoji: "🤖",
    description: "The highest form of Generative UI. Real-time, bidirectional dialogue between users and AI agents. AI can generate interfaces and respond to user interactions continuously.",
    features: ["Real-time generation", "Bidirectional interaction", "Continuous feedback", "Intelligent adaptation"],
    codeExample: `// Agent-driven interface
const AgentUI = () => {
  const [interface, setInterface] = useState(null);

  const handleUserAction = async (action) => {
    const newUI = await agent.processInteraction({
      action,
      context: currentState,
      userIntent: analyzedIntent
    });

    setInterface(newUI);
  };

  return <DynamicRenderer ui={interface} />;
};`,
    color: "from-indigo-100 to-indigo-200"
  }
];

// Chat message component
const ChatMessage = ({ message, isUser }: { message: string; isUser: boolean }) => (
  <div className={`flex ${isUser ? 'justify-end' : 'justify-start'} mb-3`}>
    <div className={`max-w-[80%] p-3 rounded-lg ${
      isUser
        ? 'bg-blue-500 text-white'
        : 'bg-white border border-slate-200'
    }`}>
      <div className="text-sm whitespace-pre-wrap">{message}</div>
    </div>
  </div>
);

// Main Playground component
export default function PlaygroundPage() {
  const [selectedLevel, setSelectedLevel] = useState(0);
  const { completion, input, handleInputChange, handleSubmit } = useCompletion({
    api: '/api/agents/stream/enhanced_markdown',
    streamProtocol: 'data',
  });

  const [chatMessages, setChatMessages] = useState([
    { text: "Welcome! Select a level to explore different UI generation approaches.", isUser: false }
  ]);

  const currentLevel = levelData[selectedLevel];


  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-white to-slate-100">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-md border-b border-slate-200/50">
        <div className="max-w-7xl mx-auto px-4 h-16 flex items-center justify-between">
          <div className="flex items-center space-x-6">
            <h1 className="text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
              Generative UI Playground
            </h1>
            <nav className="hidden md:flex space-x-4">
              <a href="/" className="text-slate-600 hover:text-slate-900 text-sm">Home</a>
              <a href="/playground" className="text-blue-600 font-medium text-sm">Playground</a>
            </nav>
          </div>

          <div className="flex items-center space-x-4">
            <span className="text-sm text-slate-500">
              {currentLevel.title}
            </span>
            <button className="text-slate-600 hover:text-slate-900">
              <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clipRule="evenodd" />
              </svg>
            </button>
          </div>
        </div>
      </header>

      {/* Main Content - Left/Right Layout */}
      <main className="max-w-7xl mx-auto px-4 py-6 flex gap-6 h-[calc(100vh-4rem)]">
        {/* Left Panel - 2/3 width */}
        <div className="w-2/3 flex flex-col">
          {/* Generative UI Maturity Spectrum */}
          <div className="mb-6">
            <h2 className="text-2xl font-bold text-slate-900 mb-4">Generative UI Maturity Spectrum</h2>
            <p className="text-slate-600 mb-6">
              Explore different levels of UI generation maturity, from basic Markdown to fully interactive agent-driven interfaces.
            </p>

            {/* Timeline */}
            <div className="relative mb-8">
              {/* Timeline Line */}
              <div className="absolute top-8 left-0 right-0 h-px bg-gradient-to-r from-blue-200 via-purple-200 to-indigo-200"></div>

              {/* Timeline Levels */}
              <div className="relative grid grid-cols-5 gap-2">
                {levelData.map((level) => (
                  <div key={level.id} className="text-center">
                    <button
                      onClick={() => setSelectedLevel(level.id)}
                      className={`relative z-10 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-3 border-2 border-white shadow-md transition-all ${
                        selectedLevel === level.id
                          ? `bg-gradient-to-br ${level.color} ring-2 ring-blue-500 ring-offset-2`
                          : `bg-gradient-to-br ${level.color} hover:scale-105`
                      }`}
                    >
                      <span className="text-lg">{level.emoji}</span>
                    </button>
                    <div className={`bg-white/90 backdrop-blur-sm rounded-lg p-2 border ${
                      selectedLevel === level.id ? 'border-blue-300 shadow-md' : 'border-slate-200/50'
                    } min-h-[80px] transition-all`}>
                      <h3 className="font-semibold text-slate-900 mb-1 text-xs">Level {level.id}</h3>
                      <h4 className="font-medium text-slate-800 mb-1 text-xs">
                        {level.title.split(':')[1]?.trim() || level.title}
                      </h4>
                      <p className="text-slate-600 text-xs leading-tight">
                        {level.description.split('.')[0]}.
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Selected Level Details */}
          <div className="flex-1 bg-white/80 backdrop-blur-sm rounded-xl border border-slate-200/50 p-6 overflow-auto">
            <div className="flex items-center mb-4">
              <div className={`w-12 h-12 bg-gradient-to-br ${currentLevel.color} rounded-lg flex items-center justify-center mr-4`}>
                <span className="text-xl">{currentLevel.emoji}</span>
              </div>
              <div>
                <h3 className="text-xl font-bold text-slate-900">{currentLevel.title}</h3>
              </div>
            </div>

            <p className="text-slate-700 mb-6 leading-relaxed">{currentLevel.description}</p>

            {/* Features */}
            <div className="mb-6">
              <h4 className="font-semibold text-slate-900 mb-3">Key Features</h4>
              <div className="grid grid-cols-2 gap-2">
                {currentLevel.features.map((feature, index) => (
                  <div key={index} className="flex items-center text-sm text-slate-600">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
                    {feature}
                  </div>
                ))}
              </div>
            </div>

            {/* Code Example */}
            <div>
              <h4 className="font-semibold text-slate-900 mb-3">Code Example</h4>
              <pre className="bg-slate-900 text-slate-100 p-4 rounded-lg overflow-auto text-sm">
                <code>{currentLevel.codeExample}</code>
              </pre>
            </div>
          </div>
        </div>

        {/* Right Panel - 1/3 width - Chat */}
        <div className="w-1/3 bg-white/80 backdrop-blur-sm rounded-xl border border-slate-200/50 flex flex-col">
          {/* Chat Header */}
          <div className="p-4 border-b border-slate-200/50">
            <h3 className="font-semibold text-slate-900">AI Assistant</h3>
            <p className="text-sm text-slate-500">Ask about the selected level</p>
          </div>

          {/* Chat Messages */}
          <div className="flex-1 p-4 overflow-auto">
            {chatMessages.map((message, index) => (
              <ChatMessage key={index} message={message.text} isUser={message.isUser} />
            ))}
          </div>

          {/* Chat Input */}
          <div className="p-4 border-t border-slate-200/50">
            <form onSubmit={handleSubmit} className="flex space-x-2">
              <input
                type="text"
                value={input}
                onChange={handleInputChange}
                placeholder="Ask about this level..."
                className="flex-1 px-3 py-2 text-sm rounded-lg border border-slate-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <button
                type="submit"
                disabled={!input.trim()}
                className="px-4 py-2 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                Send
              </button>
            </form>
          </div>
        </div>
      </main>
    </div>
  );
}